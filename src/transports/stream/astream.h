/*
    Copyright (c) 2013 Martin Sustrik  All rights reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom
    the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.
*/

#ifndef NN_AIPC_INCLUDED
#define NN_AIPC_INCLUDED

#include "sstream.h"
#include "ustream.h"

#include "../../transport.h"

#include "../../aio/fsm.h"

#include "../../utils/list.h"

/*  State machine handling accepted IPC sockets. */

#define NN_ASTREAM_ACCEPTED 34231
#define NN_ASTREAM_ERROR 34232
#define NN_ASTREAM_STOPPED 34233

struct nn_astream {

    /*  The state machine. */
    struct nn_fsm fsm;
    int state;

    /*  Pointer to the associated endpoint. */
    struct nn_epbase *epbase;

    /*  Underlying socket. */
    struct nn_stream usock;

    /*  Listening socket. Valid only while accepting new connection. */
    struct nn_stream *listener;
    struct nn_fsm *owner;

    /*  State machine that takes care of the connection in the active state. */
    struct nn_sstream sstream;

    /*  Events generated by astream state machine. */
    struct nn_fsm_event accepted;
    struct nn_fsm_event done;

    /*  Virtual function table for stream subclass overrides. */
    struct nn_stream_vfptr *vft;

    /*  This member can be used by owner to keep individual astreams in a list. */
    struct nn_list_item item;
};

void nn_astream_init (struct nn_astream *self, struct nn_epbase *epbase,
    struct nn_fsm *owner, struct nn_stream_vfptr *vft);
void nn_astream_term (struct nn_astream *self);

int nn_astream_isidle (struct nn_astream *self);
void nn_astream_start (struct nn_astream *self, struct nn_stream *listener);
void nn_astream_stop (struct nn_astream *self);

#endif

