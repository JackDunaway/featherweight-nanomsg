/*
    Copyright (c) 2013 Martin Sustrik  All rights reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom
    the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.
*/

#ifndef NN_CTX_INCLUDED
#define NN_CTX_INCLUDED

#include "../utils/mutex.h"
#include "../utils/queue.h"
#include "../utils/sem.h"

#include "pool.h"
#include "fsm.h"

/*  The context object provides synchronization and locking to protect a
    resource for proper multithreaded/concurrent access. */

typedef void (*nn_ctx_onleave) (struct nn_ctx *self);

struct nn_ctx {

    /*  Synchronization mutex to limit concurrent access. */
    struct nn_mutex sync;

    /*  Worker pool responsible for processing events to the object protected
        by this context. */
    struct nn_pool *pool;

    /*  Queue of events destined to the object protected by this context. */
    struct nn_queue incoming;

    /*  Queue of events generated by the object protected by this context and
        destined for another object. */
    struct nn_queue outgoing;

    /*  Function called to notify object when the context is about to unlock
        the mutex on the object. */
    nn_ctx_onleave onleave;

    /*  Count of active mutex locks on this context. An unlocked context has 0
        locks, a locked context has 1 lock (or more, if recursively locked
        by the same thread).*/
    int locks;

    /*  Semaphore that becomes active once all active holds on the context
        are released. */
    struct nn_sem released;

    /*  Count of active holds on this context. The mutex does not necessarily
        need to remain locked for holds to remain active, since a hold
        represents the intention to regain the mutex at some point. */
    int holds;
};

/*  Context lifetime.  */
void nn_ctx_init (struct nn_ctx *self, struct nn_pool *pool,
    nn_ctx_onleave onleave, int initial_holds);
void nn_ctx_term (struct nn_ctx *self);

void nn_ctx_enter (struct nn_ctx *self);
void nn_ctx_leave (struct nn_ctx *self);


int nn_ctx_hold (struct nn_ctx *self);
void nn_ctx_release (struct nn_ctx *self);

void nn_ctx_wait_til_released (struct nn_ctx *self);

void nn_ctx_raise (struct nn_ctx *self, struct nn_fsm_event *event);
void nn_ctx_raiseto (struct nn_ctx *self, struct nn_fsm_event *event);

#endif

